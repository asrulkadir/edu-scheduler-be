// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id         String    @id @default(uuid())
  name       String
  gender     String
  subjectIds String[]
  profileImg String?
  nip        String    @unique
  users      User[]
  classes    Class[]
  subjects   Subject[]
  teachingSchedules TeachingSchedule[]
  subjectsSchedules SubjectsSchedule[]
  phone      String?  @unique
  address    String?
}

model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  username  String    @unique
  role      Role
  createdAt DateTime  @default(now())
  password  String
  teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId String?
  student   Student?  @relation(fields: [studentId], references: [id])
  studentId String?
  client    Client?   @relation(fields: [clientId], references: [id])
  clientId  String?
}

model Client {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
}

model Subject {
  id          String    @id @default(uuid())
  name        String
  description String
  teacher     Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId   String?
  classes     Class[]

  TeachingSchedule TeachingSchedule[]

  SubjectsSchedule SubjectsSchedule[]
}

model TeachingSchedule {
  id        String   @id @default(uuid())
  days      String
  startTime DateTime
  endTime   DateTime
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId String
  subject   Subject   @relation(fields: [subjectId], references: [id])
  subjectId String
  class     Class     @relation(fields: [classId], references: [id])
  classId   String

  SubjectsSchedule SubjectsSchedule[]
}

model SubjectsSchedule {
  id                   String   @id @default(uuid())
  days                 String
  startTime            DateTime
  endTime              DateTime
  teacher              Teacher?  @relation(fields: [takenByteacher], references: [id])
  takenByteacher       String?
  subject              Subject   @relation(fields: [subjectId], references: [id])
  subjectId            String
  class                Class?    @relation(fields: [classId], references: [id])
  classId              String?
  teachingSchedule     TeachingSchedule? @relation(fields: [teachingScheduleId], references: [id])
  teachingScheduleId   String?
  academicCalendar     AcademicCalendar @relation(fields: [academicCalendarId], references: [id])
  academicCalendarId   String
}

model Class {
  id               String    @id @default(uuid())
  name             String
  homeroomTeacher  Teacher?  @relation(fields: [homeroomTeacherId], references: [id])
  homeroomTeacherId String?
  subjects         Subject[]
  students         Student[]

  TeachingSchedule TeachingSchedule[]

  SubjectsSchedule SubjectsSchedule[]
}

model Student {
  id         String   @id @default(uuid())
  name       String
  gender     String
  profileImg String?
  nis        String   @unique
  class      Class    @relation(fields: [classId], references: [id])
  classId    String

  User User[]
}

model AcademicCalendar {
  id        String   @id @default(uuid())
  name      String
  startTime DateTime
  endTime   DateTime
  schedules AcademicCalendarSchedule[]

  SubjectsSchedule SubjectsSchedule[]
}

model AcademicCalendarSchedule {
  id                 String   @id @default(uuid())
  name               String
  date               DateTime
  description        String?
  academicCalendar   AcademicCalendar @relation(fields: [academicCalendarId], references: [id])
  academicCalendarId String
}

enum Role {
  SUPERADMIN
  ADMIN
  TEACHER
  STUDENT
}
