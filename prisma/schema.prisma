generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                String             @id @default(uuid())
  name              String
  gender            Gender
  clientId          String
  profileImg        String?
  nip               String             @unique
  phone             String?            @unique
  address           String?
  classes           Class[]
  subjects          Subject[]
  subjectsSchedules SubjectsSchedule[]
  teachingSchedules TeachingSchedule[]
  users             User[]
  client            Client             @relation(fields: [clientId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  role      Role
  createdAt DateTime @default(now())
  password  String
  teacherId String?
  studentId String?
  clientId  String
  name      String
  emailHash String   @unique
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])
  student   Student? @relation(fields: [studentId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model Client {
  id                        String   @id @default(uuid())
  name                      String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  users                     User[]
  subject                   Subject[]
  teacher                   Teacher[]
  teachingSchedule          TeachingSchedule[]
  subjectsSchedule          SubjectsSchedule[]
  class                     Class[]
  student                   Student[]
  academicCalendar          AcademicCalendar[]
  academicCalendarSchedule  AcademicCalendarSchedule[]
}

model Subject {
  id               String             @id @default(uuid())
  name             String
  description      String
  teacher          Teacher[]
  subjectsSchedule SubjectsSchedule[]
  teachingSchedule TeachingSchedule[]
  classes          Class[]            @relation("ClassToSubject")
  clientId         String
  client           Client             @relation(fields: [clientId], references: [id])
}

model TeachingSchedule {
  id               String             @id @default(uuid())
  days             String
  startTime        DateTime
  endTime          DateTime
  teacherId        String
  subjectId        String
  classId          String
  subjectsSchedule SubjectsSchedule[]
  class            Class              @relation(fields: [classId], references: [id])
  subject          Subject            @relation(fields: [subjectId], references: [id])
  teacher          Teacher            @relation(fields: [teacherId], references: [id])
  clientId         String
  client           Client             @relation(fields: [clientId], references: [id])
}

model SubjectsSchedule {
  id                 String            @id @default(uuid())
  days               String
  startTime          DateTime
  endTime            DateTime
  takenByteacher     String?
  subjectId          String
  classId            String?
  teachingScheduleId String?
  academicCalendarId String
  academicCalendar   AcademicCalendar  @relation(fields: [academicCalendarId], references: [id])
  class              Class?            @relation(fields: [classId], references: [id])
  subject            Subject           @relation(fields: [subjectId], references: [id])
  teacher            Teacher?          @relation(fields: [takenByteacher], references: [id])
  teachingSchedule   TeachingSchedule? @relation(fields: [teachingScheduleId], references: [id])
  clientId           String
  client             Client            @relation(fields: [clientId], references: [id])
}

model Class {
  id                String             @id @default(uuid())
  name              String
  homeroomTeacherId String?
  homeroomTeacher   Teacher?           @relation(fields: [homeroomTeacherId], references: [id])
  students          Student[]
  subjectsSchedule  SubjectsSchedule[]
  teachingSchedule  TeachingSchedule[]
  subjects          Subject[]          @relation("ClassToSubject")
  clientId          String
  client            Client             @relation(fields: [clientId], references: [id])
}

model Student {
  id         String  @id @default(uuid())
  name       String
  gender     Gender
  profileImg String?
  nis        String  @unique
  classId    String
  class      Class   @relation(fields: [classId], references: [id])
  user       User[]
  clientId   String
  client     Client  @relation(fields: [clientId], references: [id])
}

model AcademicCalendar {
  id               String                     @id @default(uuid())
  name             String
  startTime        DateTime
  endTime          DateTime
  schedules        AcademicCalendarSchedule[]
  subjectsSchedule SubjectsSchedule[]
  clientId         String
  client           Client                     @relation(fields: [clientId], references: [id])
}

model AcademicCalendarSchedule {
  id                 String           @id @default(uuid())
  name               String
  date               DateTime
  description        String?
  academicCalendarId String
  academicCalendar   AcademicCalendar @relation(fields: [academicCalendarId], references: [id])
  clientId           String
  client             Client           @relation(fields: [clientId], references: [id])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  SUPERADMIN
}

enum Gender {
  male
  female
}
